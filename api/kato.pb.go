// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/kato.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccessType int32

const (
	AccessType_READ   AccessType = 0
	AccessType_MODIFY AccessType = 1
	AccessType_DELETE AccessType = 2
	AccessType_ADMIN  AccessType = 3
)

var AccessType_name = map[int32]string{
	0: "READ",
	1: "MODIFY",
	2: "DELETE",
	3: "ADMIN",
}

var AccessType_value = map[string]int32{
	"READ":   0,
	"MODIFY": 1,
	"DELETE": 2,
	"ADMIN":  3,
}

func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}

func (AccessType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{0}
}

type Identifier_IdentifierType int32

const (
	Identifier_MODEL        Identifier_IdentifierType = 0
	Identifier_PROJECT      Identifier_IdentifierType = 1
	Identifier_USER         Identifier_IdentifierType = 2
	Identifier_TEAM         Identifier_IdentifierType = 3
	Identifier_ORGANIZATION Identifier_IdentifierType = 4
	Identifier_GLOBAL       Identifier_IdentifierType = 5
)

var Identifier_IdentifierType_name = map[int32]string{
	0: "MODEL",
	1: "PROJECT",
	2: "USER",
	3: "TEAM",
	4: "ORGANIZATION",
	5: "GLOBAL",
}

var Identifier_IdentifierType_value = map[string]int32{
	"MODEL":        0,
	"PROJECT":      1,
	"USER":         2,
	"TEAM":         3,
	"ORGANIZATION": 4,
	"GLOBAL":       5,
}

func (x Identifier_IdentifierType) String() string {
	return proto.EnumName(Identifier_IdentifierType_name, int32(x))
}

func (Identifier_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{1, 0}
}

type Model_ModelType int32

const (
	Model_ONNX       Model_ModelType = 0
	Model_TENSORFLOW Model_ModelType = 2
	Model_TORCH      Model_ModelType = 3
	Model_H2O        Model_ModelType = 4
	Model_COREML     Model_ModelType = 5
	Model_KERAS      Model_ModelType = 6
	Model_SKLEARN    Model_ModelType = 7
)

var Model_ModelType_name = map[int32]string{
	0: "ONNX",
	2: "TENSORFLOW",
	3: "TORCH",
	4: "H2O",
	5: "COREML",
	6: "KERAS",
	7: "SKLEARN",
}

var Model_ModelType_value = map[string]int32{
	"ONNX":       0,
	"TENSORFLOW": 2,
	"TORCH":      3,
	"H2O":        4,
	"COREML":     5,
	"KERAS":      6,
	"SKLEARN":    7,
}

func (x Model_ModelType) String() string {
	return proto.EnumName(Model_ModelType_name, int32(x))
}

func (Model_ModelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{2, 0}
}

type Member struct {
	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rights               []AccessType `protobuf:"varint,2,rep,packed,name=rights,proto3,enum=kato.AccessType" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{0}
}

func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Member) GetRights() []AccessType {
	if m != nil {
		return m.Rights
	}
	return nil
}

type Identifier struct {
	Query                string                    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Id                   string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type                 Identifier_IdentifierType `protobuf:"varint,3,opt,name=type,proto3,enum=kato.Identifier_IdentifierType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Identifier) Reset()         { *m = Identifier{} }
func (m *Identifier) String() string { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()    {}
func (*Identifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{1}
}

func (m *Identifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifier.Unmarshal(m, b)
}
func (m *Identifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifier.Marshal(b, m, deterministic)
}
func (m *Identifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifier.Merge(m, src)
}
func (m *Identifier) XXX_Size() int {
	return xxx_messageInfo_Identifier.Size(m)
}
func (m *Identifier) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifier.DiscardUnknown(m)
}

var xxx_messageInfo_Identifier proto.InternalMessageInfo

func (m *Identifier) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Identifier) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Identifier) GetType() Identifier_IdentifierType {
	if m != nil {
		return m.Type
	}
	return Identifier_MODEL
}

type Model struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source               string          `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Projectid            string          `protobuf:"bytes,4,opt,name=projectid,proto3" json:"projectid,omitempty"`
	License              string          `protobuf:"bytes,5,opt,name=license,proto3" json:"license,omitempty"`
	Prior                string          `protobuf:"bytes,6,opt,name=prior,proto3" json:"prior,omitempty"`
	LastUpdated          uint64          `protobuf:"varint,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Type                 Model_ModelType `protobuf:"varint,8,opt,name=type,proto3,enum=kato.Model_ModelType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{2}
}

func (m *Model) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Model.Unmarshal(m, b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Model.Marshal(b, m, deterministic)
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return xxx_messageInfo_Model.Size(m)
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

func (m *Model) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Model) GetProjectid() string {
	if m != nil {
		return m.Projectid
	}
	return ""
}

func (m *Model) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Model) GetPrior() string {
	if m != nil {
		return m.Prior
	}
	return ""
}

func (m *Model) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *Model) GetType() Model_ModelType {
	if m != nil {
		return m.Type
	}
	return Model_ONNX
}

type ModelList struct {
	Number               uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result               []*Model `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModelList) Reset()         { *m = ModelList{} }
func (m *ModelList) String() string { return proto.CompactTextString(m) }
func (*ModelList) ProtoMessage()    {}
func (*ModelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{3}
}

func (m *ModelList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModelList.Unmarshal(m, b)
}
func (m *ModelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModelList.Marshal(b, m, deterministic)
}
func (m *ModelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelList.Merge(m, src)
}
func (m *ModelList) XXX_Size() int {
	return xxx_messageInfo_ModelList.Size(m)
}
func (m *ModelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelList.DiscardUnknown(m)
}

var xxx_messageInfo_ModelList proto.InternalMessageInfo

func (m *ModelList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ModelList) GetResult() []*Model {
	if m != nil {
		return m.Result
	}
	return nil
}

type Project struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Public               bool      `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	LastUpdated          uint64    `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Users                []*Member `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{4}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Project) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *Project) GetUsers() []*Member {
	if m != nil {
		return m.Users
	}
	return nil
}

type ProjectList struct {
	Number               uint32     `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result               []*Project `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ProjectList) Reset()         { *m = ProjectList{} }
func (m *ProjectList) String() string { return proto.CompactTextString(m) }
func (*ProjectList) ProtoMessage()    {}
func (*ProjectList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{5}
}

func (m *ProjectList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectList.Unmarshal(m, b)
}
func (m *ProjectList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectList.Marshal(b, m, deterministic)
}
func (m *ProjectList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectList.Merge(m, src)
}
func (m *ProjectList) XXX_Size() int {
	return xxx_messageInfo_ProjectList.Size(m)
}
func (m *ProjectList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectList.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectList proto.InternalMessageInfo

func (m *ProjectList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ProjectList) GetResult() []*Project {
	if m != nil {
		return m.Result
	}
	return nil
}

type User struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Origin               string   `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Premium              bool     `protobuf:"varint,4,opt,name=premium,proto3" json:"premium,omitempty"`
	LastUpdated          uint64   `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{6}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *User) GetPremium() bool {
	if m != nil {
		return m.Premium
	}
	return false
}

func (m *User) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

type UserList struct {
	Number               uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result               []*User  `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{7}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *UserList) GetResult() []*User {
	if m != nil {
		return m.Result
	}
	return nil
}

type Team struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Members              []*Member  `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Projects             []*Project `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
	LastUpdated          uint64     `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{8}
}

func (m *Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Team.Unmarshal(m, b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Team.Marshal(b, m, deterministic)
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return xxx_messageInfo_Team.Size(m)
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Team) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *Team) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

type TeamList struct {
	Number               uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result               []*Team  `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{9}
}

func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamList.Unmarshal(m, b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return xxx_messageInfo_TeamList.Size(m)
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *TeamList) GetResult() []*Team {
	if m != nil {
		return m.Result
	}
	return nil
}

type Organization struct {
	Id                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Members              []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Teams                []*Team   `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	LastUpdated          uint64    `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{10}
}

func (m *Organization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Organization.Unmarshal(m, b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return xxx_messageInfo_Organization.Size(m)
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Organization) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Organization) GetLastUpdated() uint64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

type OrganizationList struct {
	Number               uint32          `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result               []*Organization `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OrganizationList) Reset()         { *m = OrganizationList{} }
func (m *OrganizationList) String() string { return proto.CompactTextString(m) }
func (*OrganizationList) ProtoMessage()    {}
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e2d385848e06f14, []int{11}
}

func (m *OrganizationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrganizationList.Unmarshal(m, b)
}
func (m *OrganizationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrganizationList.Marshal(b, m, deterministic)
}
func (m *OrganizationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationList.Merge(m, src)
}
func (m *OrganizationList) XXX_Size() int {
	return xxx_messageInfo_OrganizationList.Size(m)
}
func (m *OrganizationList) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationList.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationList proto.InternalMessageInfo

func (m *OrganizationList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *OrganizationList) GetResult() []*Organization {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("kato.AccessType", AccessType_name, AccessType_value)
	proto.RegisterEnum("kato.Identifier_IdentifierType", Identifier_IdentifierType_name, Identifier_IdentifierType_value)
	proto.RegisterEnum("kato.Model_ModelType", Model_ModelType_name, Model_ModelType_value)
	proto.RegisterType((*Member)(nil), "kato.Member")
	proto.RegisterType((*Identifier)(nil), "kato.Identifier")
	proto.RegisterType((*Model)(nil), "kato.Model")
	proto.RegisterType((*ModelList)(nil), "kato.ModelList")
	proto.RegisterType((*Project)(nil), "kato.Project")
	proto.RegisterType((*ProjectList)(nil), "kato.ProjectList")
	proto.RegisterType((*User)(nil), "kato.User")
	proto.RegisterType((*UserList)(nil), "kato.UserList")
	proto.RegisterType((*Team)(nil), "kato.Team")
	proto.RegisterType((*TeamList)(nil), "kato.TeamList")
	proto.RegisterType((*Organization)(nil), "kato.Organization")
	proto.RegisterType((*OrganizationList)(nil), "kato.OrganizationList")
}

func init() { proto.RegisterFile("api/kato.proto", fileDescriptor_2e2d385848e06f14) }

var fileDescriptor_2e2d385848e06f14 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc6, 0x60, 0x63, 0x38, 0xb0, 0x64, 0x76, 0xd4, 0xae, 0xac, 0xaa, 0x52, 0xa9, 0x57, 0x8d,
	0xc8, 0xb6, 0xda, 0xac, 0xc8, 0x45, 0xb5, 0xaa, 0x54, 0xc9, 0x09, 0x0e, 0xa1, 0x01, 0x8c, 0x1c,
	0xd2, 0x9f, 0x48, 0x55, 0xe5, 0xc0, 0x34, 0x9d, 0x16, 0xb0, 0xeb, 0x9f, 0x8b, 0xf4, 0xa6, 0x8f,
	0xd2, 0x3e, 0x41, 0x1f, 0xa1, 0x37, 0x7d, 0x84, 0xbe, 0x50, 0x35, 0x3f, 0x76, 0x0c, 0x98, 0x04,
	0xad, 0x7a, 0x83, 0xe6, 0xcc, 0xf9, 0xf1, 0xf7, 0x7d, 0x3e, 0xe7, 0x18, 0x68, 0x79, 0x01, 0x3d,
	0xfe, 0xc5, 0x8b, 0xfd, 0xd7, 0x41, 0xe8, 0xc7, 0x3e, 0x56, 0xd9, 0xd9, 0x3c, 0x85, 0xea, 0x88,
	0x2c, 0x6f, 0x49, 0x88, 0x5b, 0x50, 0xa6, 0x73, 0x43, 0x69, 0x2b, 0x9d, 0xba, 0x5b, 0xa6, 0x73,
	0xdc, 0x81, 0x6a, 0x48, 0xef, 0x7e, 0x8a, 0x23, 0xa3, 0xdc, 0xae, 0x74, 0x5a, 0x5d, 0xf4, 0x9a,
	0x27, 0x5b, 0xb3, 0x19, 0x89, 0xa2, 0xe9, 0x7d, 0x40, 0x5c, 0xe9, 0x37, 0xff, 0x51, 0x00, 0x06,
	0x73, 0xb2, 0x8a, 0xe9, 0x8f, 0x94, 0x84, 0xf8, 0x3d, 0xd0, 0x7e, 0x4d, 0x48, 0x78, 0x2f, 0x6b,
	0x09, 0x43, 0x96, 0x2f, 0x67, 0xe5, 0x4f, 0x40, 0x8d, 0xef, 0x03, 0x62, 0x54, 0xda, 0x4a, 0xa7,
	0xd5, 0xfd, 0x48, 0x14, 0x7f, 0xa8, 0x92, 0x3b, 0xf2, 0x67, 0xf1, 0x60, 0xf3, 0x06, 0x5a, 0xeb,
	0xf7, 0xb8, 0x0e, 0xda, 0xc8, 0xe9, 0xd9, 0x43, 0x54, 0xc2, 0x0d, 0xd0, 0x27, 0xae, 0xf3, 0x95,
	0x7d, 0x36, 0x45, 0x0a, 0xae, 0x81, 0x7a, 0x7d, 0x65, 0xbb, 0xa8, 0xcc, 0x4e, 0x53, 0xdb, 0x1a,
	0xa1, 0x0a, 0x46, 0xd0, 0x74, 0xdc, 0xbe, 0x35, 0x1e, 0xdc, 0x58, 0xd3, 0x81, 0x33, 0x46, 0x2a,
	0x06, 0xa8, 0xf6, 0x87, 0xce, 0xa9, 0x35, 0x44, 0x9a, 0xf9, 0x77, 0x19, 0xb4, 0x91, 0x3f, 0x27,
	0x8b, 0x2d, 0x25, 0x30, 0xa8, 0x2b, 0x6f, 0x49, 0x24, 0x78, 0x7e, 0xc6, 0x2f, 0xa0, 0x1a, 0xf9,
	0x49, 0x38, 0x13, 0x04, 0xea, 0xae, 0xb4, 0xf0, 0x87, 0x50, 0x0f, 0x42, 0xff, 0x67, 0x32, 0x8b,
	0xe9, 0xdc, 0x50, 0xb9, 0xeb, 0xe1, 0x02, 0x1b, 0xa0, 0x2f, 0xe8, 0x8c, 0xac, 0x22, 0x62, 0x68,
	0xdc, 0x97, 0x9a, 0x4c, 0xb4, 0x20, 0xa4, 0x7e, 0x68, 0x54, 0x85, 0x68, 0xdc, 0xc0, 0x1f, 0x43,
	0x73, 0xe1, 0x45, 0xf1, 0x0f, 0x49, 0x30, 0xf7, 0x62, 0x32, 0x37, 0xf4, 0xb6, 0xd2, 0x51, 0xdd,
	0x06, 0xbb, 0xbb, 0x16, 0x57, 0xf8, 0x48, 0xea, 0x58, 0xe3, 0x3a, 0xbe, 0x2f, 0x74, 0xe4, 0x3c,
	0xc4, 0x6f, 0x4e, 0xbd, 0xef, 0xa1, 0x9e, 0x5d, 0x31, 0x59, 0x9c, 0xf1, 0xf8, 0x5b, 0x54, 0xc2,
	0x2d, 0x80, 0xa9, 0x3d, 0xbe, 0x72, 0xdc, 0xf3, 0xa1, 0xf3, 0x0d, 0x2a, 0x33, 0x49, 0xa7, 0x8e,
	0x7b, 0x76, 0x81, 0x2a, 0x58, 0x87, 0xca, 0x45, 0xd7, 0x11, 0x42, 0x9d, 0x39, 0xae, 0x3d, 0x1a,
	0x22, 0x8d, 0xf9, 0x2f, 0x6d, 0xd7, 0xba, 0x42, 0x55, 0x26, 0xf9, 0xd5, 0xe5, 0xd0, 0xb6, 0xdc,
	0x31, 0xd2, 0xcd, 0x0b, 0x59, 0x7e, 0x48, 0xa3, 0x98, 0xe9, 0xb3, 0x4a, 0x58, 0x5f, 0x71, 0x1d,
	0x9f, 0xb9, 0xd2, 0xc2, 0x2f, 0xa1, 0x1a, 0x92, 0x28, 0x59, 0xc4, 0xbc, 0xab, 0x1a, 0xdd, 0x46,
	0x0e, 0xb0, 0x2b, 0x5d, 0xe6, 0x5f, 0x0a, 0xe8, 0x13, 0x21, 0xda, 0x5e, 0x2f, 0xa3, 0x0d, 0x8d,
	0x39, 0x89, 0x66, 0x21, 0x0d, 0x62, 0xea, 0xaf, 0xe4, 0x1b, 0xc9, 0x5f, 0x31, 0x38, 0x41, 0x72,
	0xbb, 0xa0, 0x33, 0xfe, 0x4e, 0x6a, 0xae, 0xb4, 0xb6, 0x04, 0xd6, 0xb6, 0x05, 0x36, 0x41, 0x4b,
	0x22, 0x12, 0x46, 0x46, 0x95, 0x03, 0x6e, 0x4a, 0xc0, 0x7c, 0x68, 0x5c, 0xe1, 0x32, 0x87, 0xd0,
	0x90, 0x78, 0x1f, 0x25, 0xff, 0xc9, 0x06, 0xf9, 0x67, 0xa2, 0x96, 0x4c, 0xcd, 0xe8, 0xff, 0x0e,
	0xea, 0x75, 0x54, 0x30, 0x91, 0x3b, 0xfa, 0xd0, 0x0f, 0xe9, 0x1d, 0x4d, 0x59, 0x4b, 0x8b, 0x75,
	0x5a, 0x10, 0x92, 0x25, 0x4d, 0x96, 0x92, 0x71, 0x6a, 0xee, 0x41, 0xd9, 0x3c, 0x87, 0x1a, 0x03,
	0xf0, 0x28, 0x17, 0x73, 0x83, 0x0b, 0x08, 0x2e, 0x2c, 0x2f, 0x23, 0xf2, 0xa7, 0x02, 0xea, 0x94,
	0x78, 0xcb, 0xbd, 0x98, 0x1c, 0x82, 0xbe, 0xe4, 0xa2, 0x46, 0x46, 0xa5, 0x40, 0xe9, 0xd4, 0x89,
	0x8f, 0xa0, 0x26, 0x07, 0x2a, 0x32, 0xd4, 0x22, 0x19, 0x33, 0xf7, 0x9e, 0x54, 0x19, 0xc2, 0x77,
	0xa1, 0xca, 0xf2, 0x32, 0xaa, 0x7f, 0x28, 0xd0, 0x74, 0xc2, 0x3b, 0x6f, 0x45, 0x7f, 0xf3, 0x78,
	0xc7, 0xfd, 0x9f, 0x94, 0xdb, 0xa0, 0xc5, 0xc4, 0x5b, 0xa6, 0x7c, 0xf3, 0xcf, 0x17, 0x8e, 0x7d,
	0x98, 0x7e, 0x0d, 0x28, 0x0f, 0xf0, 0x51, 0xc6, 0xaf, 0x36, 0x18, 0x63, 0xf1, 0xc4, 0x7c, 0x7e,
	0xca, 0xfc, 0xd5, 0x5b, 0x80, 0x87, 0x6f, 0x02, 0x5b, 0x2b, 0xae, 0x6d, 0xf5, 0x50, 0x89, 0xad,
	0x8c, 0x91, 0xd3, 0x1b, 0x9c, 0x7f, 0x87, 0x14, 0x76, 0xee, 0xd9, 0x43, 0x7b, 0x6a, 0x8b, 0xf5,
	0x62, 0xf5, 0x46, 0x83, 0x31, 0xaa, 0x74, 0xff, 0xd5, 0x41, 0xbd, 0xf4, 0x62, 0x1f, 0x9f, 0x00,
	0x30, 0x3c, 0x7c, 0x0b, 0x44, 0x18, 0x6d, 0x7e, 0x0c, 0x3e, 0x38, 0xc8, 0x6d, 0x09, 0x16, 0x68,
	0x96, 0xde, 0x28, 0xf8, 0x53, 0xa8, 0xf5, 0x89, 0xc8, 0x29, 0x48, 0xc9, 0x2f, 0x16, 0xb3, 0x84,
	0x0f, 0xa1, 0x36, 0x49, 0x64, 0x70, 0xde, 0xb5, 0x19, 0x77, 0x04, 0x8d, 0x1e, 0x59, 0x90, 0x98,
	0x3c, 0x1d, 0xfa, 0x39, 0x34, 0x19, 0x96, 0x49, 0xda, 0x6d, 0xdb, 0x18, 0x9e, 0xaf, 0x35, 0x66,
	0x06, 0xfc, 0x18, 0xa0, 0x4f, 0xd2, 0xbc, 0x82, 0xb4, 0xf5, 0x7e, 0x36, 0x4b, 0xf8, 0x33, 0x80,
	0x49, 0x92, 0x25, 0xac, 0xbb, 0xb7, 0xa3, 0x8f, 0xe1, 0x99, 0xa0, 0xb0, 0x6f, 0xc2, 0x1b, 0xa8,
	0x31, 0x6c, 0x7c, 0xe7, 0x6c, 0xa3, 0x69, 0x3d, 0x0c, 0x76, 0xc6, 0xe0, 0x08, 0xf4, 0x3e, 0xd9,
	0x95, 0x90, 0xdb, 0x04, 0x66, 0x09, 0xbf, 0x04, 0x7d, 0x92, 0x88, 0xd0, 0x9c, 0x63, 0x23, 0xe8,
	0x10, 0x40, 0x40, 0x7e, 0x22, 0x4e, 0x22, 0xe5, 0x3b, 0x65, 0x27, 0xd2, 0x74, 0x9e, 0x73, 0x48,
	0x77, 0x24, 0xe4, 0x06, 0x29, 0x43, 0xca, 0x43, 0x73, 0x8e, 0x8d, 0xa0, 0x0c, 0xe9, 0x13, 0x71,
	0x16, 0x3c, 0x67, 0x18, 0xf2, 0x13, 0x53, 0xd4, 0x21, 0x2f, 0xb6, 0x07, 0x2b, 0x83, 0xfe, 0x16,
	0x0e, 0xfa, 0x64, 0xad, 0x42, 0x41, 0x81, 0x82, 0xc9, 0x34, 0x4b, 0xf8, 0x0b, 0x38, 0x98, 0x24,
	0xeb, 0xa9, 0x05, 0x81, 0x3b, 0x92, 0xbf, 0x04, 0x2c, 0x28, 0xbe, 0x5b, 0xfe, 0xa9, 0x76, 0x53,
	0xf1, 0x02, 0x7a, 0x5b, 0xe5, 0x7f, 0x33, 0x4f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xf0,
	0x74, 0x3e, 0x78, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KatoClient is the client API for Kato service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KatoClient interface {
	ListModels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListModelsClient, error)
	GetModel(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Model, error)
	PutModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error)
	DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error)
	ListProjects(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListProjectsClient, error)
	GetProject(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Project, error)
	PutProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	ListUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListUserClient, error)
	GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error)
	PutUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ListTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListTeamClient, error)
	GetTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error)
	PutTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	DeleteTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	ListOrganizations(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListOrganizationsClient, error)
	GetOrganization(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Organization, error)
	PutOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
}

type katoClient struct {
	cc grpc.ClientConnInterface
}

func NewKatoClient(cc grpc.ClientConnInterface) KatoClient {
	return &katoClient{cc}
}

func (c *katoClient) ListModels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[0], "/kato.Kato/ListModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListModelsClient interface {
	Recv() (*ModelList, error)
	grpc.ClientStream
}

type katoListModelsClient struct {
	grpc.ClientStream
}

func (x *katoListModelsClient) Recv() (*ModelList, error) {
	m := new(ModelList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetModel(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/kato.Kato/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/kato.Kato/PutModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/kato.Kato/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListProjects(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[1], "/kato.Kato/ListProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListProjectsClient interface {
	Recv() (*ProjectList, error)
	grpc.ClientStream
}

type katoListProjectsClient struct {
	grpc.ClientStream
}

func (x *katoListProjectsClient) Recv() (*ProjectList, error) {
	m := new(ProjectList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetProject(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/kato.Kato/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/kato.Kato/PutProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/kato.Kato/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[2], "/kato.Kato/ListUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListUserClient interface {
	Recv() (*UserList, error)
	grpc.ClientStream
}

type katoListUserClient struct {
	grpc.ClientStream
}

func (x *katoListUserClient) Recv() (*UserList, error) {
	m := new(UserList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/kato.Kato/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/kato.Kato/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/kato.Kato/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[3], "/kato.Kato/ListTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListTeamClient interface {
	Recv() (*TeamList, error)
	grpc.ClientStream
}

type katoListTeamClient struct {
	grpc.ClientStream
}

func (x *katoListTeamClient) Recv() (*TeamList, error) {
	m := new(TeamList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/kato.Kato/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/kato.Kato/PutTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/kato.Kato/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListOrganizations(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListOrganizationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[4], "/kato.Kato/ListOrganizations", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListOrganizationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListOrganizationsClient interface {
	Recv() (*OrganizationList, error)
	grpc.ClientStream
}

type katoListOrganizationsClient struct {
	grpc.ClientStream
}

func (x *katoListOrganizationsClient) Recv() (*OrganizationList, error) {
	m := new(OrganizationList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetOrganization(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/kato.Kato/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/kato.Kato/PutOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/kato.Kato/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KatoServer is the server API for Kato service.
type KatoServer interface {
	ListModels(*Identifier, Kato_ListModelsServer) error
	GetModel(context.Context, *Identifier) (*Model, error)
	PutModel(context.Context, *Model) (*Model, error)
	DeleteModel(context.Context, *Model) (*Model, error)
	ListProjects(*Identifier, Kato_ListProjectsServer) error
	GetProject(context.Context, *Identifier) (*Project, error)
	PutProject(context.Context, *Project) (*Project, error)
	DeleteProject(context.Context, *Project) (*Project, error)
	ListUser(*Identifier, Kato_ListUserServer) error
	GetUser(context.Context, *Identifier) (*User, error)
	PutUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	ListTeam(*Identifier, Kato_ListTeamServer) error
	GetTeam(context.Context, *Identifier) (*Team, error)
	PutTeam(context.Context, *Team) (*Team, error)
	DeleteTeam(context.Context, *Team) (*Team, error)
	ListOrganizations(*Identifier, Kato_ListOrganizationsServer) error
	GetOrganization(context.Context, *Identifier) (*Organization, error)
	PutOrganization(context.Context, *Organization) (*Organization, error)
	DeleteOrganization(context.Context, *Organization) (*Organization, error)
}

// UnimplementedKatoServer can be embedded to have forward compatible implementations.
type UnimplementedKatoServer struct {
}

func (*UnimplementedKatoServer) ListModels(req *Identifier, srv Kato_ListModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (*UnimplementedKatoServer) GetModel(ctx context.Context, req *Identifier) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (*UnimplementedKatoServer) PutModel(ctx context.Context, req *Model) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutModel not implemented")
}
func (*UnimplementedKatoServer) DeleteModel(ctx context.Context, req *Model) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (*UnimplementedKatoServer) ListProjects(req *Identifier, srv Kato_ListProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedKatoServer) GetProject(ctx context.Context, req *Identifier) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedKatoServer) PutProject(ctx context.Context, req *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProject not implemented")
}
func (*UnimplementedKatoServer) DeleteProject(ctx context.Context, req *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedKatoServer) ListUser(req *Identifier, srv Kato_ListUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedKatoServer) GetUser(ctx context.Context, req *Identifier) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedKatoServer) PutUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (*UnimplementedKatoServer) DeleteUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedKatoServer) ListTeam(req *Identifier, srv Kato_ListTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTeam not implemented")
}
func (*UnimplementedKatoServer) GetTeam(ctx context.Context, req *Identifier) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedKatoServer) PutTeam(ctx context.Context, req *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTeam not implemented")
}
func (*UnimplementedKatoServer) DeleteTeam(ctx context.Context, req *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedKatoServer) ListOrganizations(req *Identifier, srv Kato_ListOrganizationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (*UnimplementedKatoServer) GetOrganization(ctx context.Context, req *Identifier) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedKatoServer) PutOrganization(ctx context.Context, req *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrganization not implemented")
}
func (*UnimplementedKatoServer) DeleteOrganization(ctx context.Context, req *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}

func RegisterKatoServer(s *grpc.Server, srv KatoServer) {
	s.RegisterService(&_Kato_serviceDesc, srv)
}

func _Kato_ListModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListModels(m, &katoListModelsServer{stream})
}

type Kato_ListModelsServer interface {
	Send(*ModelList) error
	grpc.ServerStream
}

type katoListModelsServer struct {
	grpc.ServerStream
}

func (x *katoListModelsServer) Send(m *ModelList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetModel(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/PutModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListProjects(m, &katoListProjectsServer{stream})
}

type Kato_ListProjectsServer interface {
	Send(*ProjectList) error
	grpc.ServerStream
}

type katoListProjectsServer struct {
	grpc.ServerStream
}

func (x *katoListProjectsServer) Send(m *ProjectList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetProject(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/PutProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListUser(m, &katoListUserServer{stream})
}

type Kato_ListUserServer interface {
	Send(*UserList) error
	grpc.ServerStream
}

type katoListUserServer struct {
	grpc.ServerStream
}

func (x *katoListUserServer) Send(m *UserList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetUser(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListTeam(m, &katoListTeamServer{stream})
}

type Kato_ListTeamServer interface {
	Send(*TeamList) error
	grpc.ServerStream
}

type katoListTeamServer struct {
	grpc.ServerStream
}

func (x *katoListTeamServer) Send(m *TeamList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetTeam(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/PutTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListOrganizations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListOrganizations(m, &katoListOrganizationsServer{stream})
}

type Kato_ListOrganizationsServer interface {
	Send(*OrganizationList) error
	grpc.ServerStream
}

type katoListOrganizationsServer struct {
	grpc.ServerStream
}

func (x *katoListOrganizationsServer) Send(m *OrganizationList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetOrganization(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/PutOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kato.Kato/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kato_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kato.Kato",
	HandlerType: (*KatoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModel",
			Handler:    _Kato_GetModel_Handler,
		},
		{
			MethodName: "PutModel",
			Handler:    _Kato_PutModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _Kato_DeleteModel_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Kato_GetProject_Handler,
		},
		{
			MethodName: "PutProject",
			Handler:    _Kato_PutProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Kato_DeleteProject_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Kato_GetUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _Kato_PutUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Kato_DeleteUser_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Kato_GetTeam_Handler,
		},
		{
			MethodName: "PutTeam",
			Handler:    _Kato_PutTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Kato_DeleteTeam_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Kato_GetOrganization_Handler,
		},
		{
			MethodName: "PutOrganization",
			Handler:    _Kato_PutOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _Kato_DeleteOrganization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListModels",
			Handler:       _Kato_ListModels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProjects",
			Handler:       _Kato_ListProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUser",
			Handler:       _Kato_ListUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTeam",
			Handler:       _Kato_ListTeam_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOrganizations",
			Handler:       _Kato_ListOrganizations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/kato.proto",
}
