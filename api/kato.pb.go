// protoc -I kato/ kato/api/kato.proto --go_out=plugins=grpc:kato

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.2
// source: api/kato.proto

package kato

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AccessType int32

const (
	AccessType_READ   AccessType = 0
	AccessType_MODIFY AccessType = 1
	AccessType_DELETE AccessType = 2
	AccessType_ADMIN  AccessType = 3
)

// Enum value maps for AccessType.
var (
	AccessType_name = map[int32]string{
		0: "READ",
		1: "MODIFY",
		2: "DELETE",
		3: "ADMIN",
	}
	AccessType_value = map[string]int32{
		"READ":   0,
		"MODIFY": 1,
		"DELETE": 2,
		"ADMIN":  3,
	}
)

func (x AccessType) Enum() *AccessType {
	p := new(AccessType)
	*p = x
	return p
}

func (x AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kato_proto_enumTypes[0].Descriptor()
}

func (AccessType) Type() protoreflect.EnumType {
	return &file_api_kato_proto_enumTypes[0]
}

func (x AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessType.Descriptor instead.
func (AccessType) EnumDescriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{0}
}

type Identifier_IdentifierType int32

const (
	Identifier_MODEL        Identifier_IdentifierType = 0
	Identifier_PROJECT      Identifier_IdentifierType = 1
	Identifier_USER         Identifier_IdentifierType = 2
	Identifier_TEAM         Identifier_IdentifierType = 3
	Identifier_ORGANIZATION Identifier_IdentifierType = 4
	Identifier_GLOBAL       Identifier_IdentifierType = 5
)

// Enum value maps for Identifier_IdentifierType.
var (
	Identifier_IdentifierType_name = map[int32]string{
		0: "MODEL",
		1: "PROJECT",
		2: "USER",
		3: "TEAM",
		4: "ORGANIZATION",
		5: "GLOBAL",
	}
	Identifier_IdentifierType_value = map[string]int32{
		"MODEL":        0,
		"PROJECT":      1,
		"USER":         2,
		"TEAM":         3,
		"ORGANIZATION": 4,
		"GLOBAL":       5,
	}
)

func (x Identifier_IdentifierType) Enum() *Identifier_IdentifierType {
	p := new(Identifier_IdentifierType)
	*p = x
	return p
}

func (x Identifier_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identifier_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kato_proto_enumTypes[1].Descriptor()
}

func (Identifier_IdentifierType) Type() protoreflect.EnumType {
	return &file_api_kato_proto_enumTypes[1]
}

func (x Identifier_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identifier_IdentifierType.Descriptor instead.
func (Identifier_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{1, 0}
}

type Model_ModelType int32

const (
	Model_ONNX       Model_ModelType = 0
	Model_TENSORFLOW Model_ModelType = 2
	Model_TORCH      Model_ModelType = 3
	Model_H2O        Model_ModelType = 4
	Model_COREML     Model_ModelType = 5
	Model_KERAS      Model_ModelType = 6
	Model_SKLEARN    Model_ModelType = 7
)

// Enum value maps for Model_ModelType.
var (
	Model_ModelType_name = map[int32]string{
		0: "ONNX",
		2: "TENSORFLOW",
		3: "TORCH",
		4: "H2O",
		5: "COREML",
		6: "KERAS",
		7: "SKLEARN",
	}
	Model_ModelType_value = map[string]int32{
		"ONNX":       0,
		"TENSORFLOW": 2,
		"TORCH":      3,
		"H2O":        4,
		"COREML":     5,
		"KERAS":      6,
		"SKLEARN":    7,
	}
)

func (x Model_ModelType) Enum() *Model_ModelType {
	p := new(Model_ModelType)
	*p = x
	return p
}

func (x Model_ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model_ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_kato_proto_enumTypes[2].Descriptor()
}

func (Model_ModelType) Type() protoreflect.EnumType {
	return &file_api_kato_proto_enumTypes[2]
}

func (x Model_ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model_ModelType.Descriptor instead.
func (Model_ModelType) EnumDescriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{2, 0}
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rights []AccessType `protobuf:"varint,2,rep,packed,name=rights,proto3,enum=AccessType" json:"rights,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Member) GetRights() []AccessType {
	if x != nil {
		return x.Rights
	}
	return nil
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string                    `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Id    string                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type  Identifier_IdentifierType `protobuf:"varint,3,opt,name=type,proto3,enum=Identifier_IdentifierType" json:"type,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{1}
}

func (x *Identifier) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Identifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identifier) GetType() Identifier_IdentifierType {
	if x != nil {
		return x.Type
	}
	return Identifier_MODEL
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source      string          `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Projectid   string          `protobuf:"bytes,4,opt,name=projectid,proto3" json:"projectid,omitempty"`
	License     string          `protobuf:"bytes,5,opt,name=license,proto3" json:"license,omitempty"`
	Prior       string          `protobuf:"bytes,6,opt,name=prior,proto3" json:"prior,omitempty"`
	LastUpdated uint64          `protobuf:"varint,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Type        Model_ModelType `protobuf:"varint,8,opt,name=type,proto3,enum=Model_ModelType" json:"type,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{2}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Model) GetProjectid() string {
	if x != nil {
		return x.Projectid
	}
	return ""
}

func (x *Model) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Model) GetPrior() string {
	if x != nil {
		return x.Prior
	}
	return ""
}

func (x *Model) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Model) GetType() Model_ModelType {
	if x != nil {
		return x.Type
	}
	return Model_ONNX
}

type ModelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result []*Model `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ModelList) Reset() {
	*x = ModelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelList) ProtoMessage() {}

func (x *ModelList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelList.ProtoReflect.Descriptor instead.
func (*ModelList) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{3}
}

func (x *ModelList) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ModelList) GetResult() []*Model {
	if x != nil {
		return x.Result
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Public      bool      `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	LastUpdated uint64    `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	Users       []*Member `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{4}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *Project) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Project) GetUsers() []*Member {
	if x != nil {
		return x.Users
	}
	return nil
}

type ProjectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32     `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result []*Project `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ProjectList) Reset() {
	*x = ProjectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectList) ProtoMessage() {}

func (x *ProjectList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectList.ProtoReflect.Descriptor instead.
func (*ProjectList) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectList) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ProjectList) GetResult() []*Project {
	if x != nil {
		return x.Result
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Origin      string `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	Premium     bool   `protobuf:"varint,4,opt,name=premium,proto3" json:"premium,omitempty"`
	LastUpdated uint64 `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *User) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *User) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result []*User `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *UserList) Reset() {
	*x = UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserList) ProtoMessage() {}

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{7}
}

func (x *UserList) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *UserList) GetResult() []*User {
	if x != nil {
		return x.Result
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Members     []*Member  `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Projects    []*Project `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
	LastUpdated uint64     `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{8}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Team) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Team) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result []*Team `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *TeamList) Reset() {
	*x = TeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{9}
}

func (x *TeamList) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TeamList) GetResult() []*Team {
	if x != nil {
		return x.Result
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Members     []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Teams       []*Team   `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	LastUpdated uint64    `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{10}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Organization) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Organization) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type OrganizationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint32          `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Result []*Organization `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *OrganizationList) Reset() {
	*x = OrganizationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_kato_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationList) ProtoMessage() {}

func (x *OrganizationList) ProtoReflect() protoreflect.Message {
	mi := &file_api_kato_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationList.ProtoReflect.Descriptor instead.
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return file_api_kato_proto_rawDescGZIP(), []int{11}
}

func (x *OrganizationList) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *OrganizationList) GetResult() []*Organization {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_api_kato_proto protoreflect.FileDescriptor

var file_api_kato_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x61, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3d, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22,
	0xbe, 0x01, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x05,
	0x22, 0xb9, 0x02, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4e,
	0x4e, 0x58, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x43, 0x48, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x32, 0x4f, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x52, 0x45,
	0x4d, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x45, 0x52, 0x41, 0x53, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x07, 0x22, 0x43, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7f, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x51,
	0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2a, 0x39, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x32, 0x8b, 0x06, 0x0a,
	0x04, 0x4b, 0x61, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x0a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x21, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0b, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x06, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x25, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x08, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x1a, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x08, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x08, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x1f, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x19, 0x0a, 0x07,
	0x50, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x05, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x09,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x1f, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x19,
	0x0a, 0x07, 0x50, 0x75, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x1a, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_kato_proto_rawDescOnce sync.Once
	file_api_kato_proto_rawDescData = file_api_kato_proto_rawDesc
)

func file_api_kato_proto_rawDescGZIP() []byte {
	file_api_kato_proto_rawDescOnce.Do(func() {
		file_api_kato_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_kato_proto_rawDescData)
	})
	return file_api_kato_proto_rawDescData
}

var file_api_kato_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_kato_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_kato_proto_goTypes = []interface{}{
	(AccessType)(0),                // 0: AccessType
	(Identifier_IdentifierType)(0), // 1: Identifier.IdentifierType
	(Model_ModelType)(0),           // 2: Model.ModelType
	(*Member)(nil),                 // 3: Member
	(*Identifier)(nil),             // 4: Identifier
	(*Model)(nil),                  // 5: Model
	(*ModelList)(nil),              // 6: ModelList
	(*Project)(nil),                // 7: Project
	(*ProjectList)(nil),            // 8: ProjectList
	(*User)(nil),                   // 9: User
	(*UserList)(nil),               // 10: UserList
	(*Team)(nil),                   // 11: Team
	(*TeamList)(nil),               // 12: TeamList
	(*Organization)(nil),           // 13: Organization
	(*OrganizationList)(nil),       // 14: OrganizationList
}
var file_api_kato_proto_depIdxs = []int32{
	0,  // 0: Member.rights:type_name -> AccessType
	1,  // 1: Identifier.type:type_name -> Identifier.IdentifierType
	2,  // 2: Model.type:type_name -> Model.ModelType
	5,  // 3: ModelList.result:type_name -> Model
	3,  // 4: Project.users:type_name -> Member
	7,  // 5: ProjectList.result:type_name -> Project
	9,  // 6: UserList.result:type_name -> User
	3,  // 7: Team.members:type_name -> Member
	7,  // 8: Team.projects:type_name -> Project
	11, // 9: TeamList.result:type_name -> Team
	3,  // 10: Organization.members:type_name -> Member
	11, // 11: Organization.teams:type_name -> Team
	13, // 12: OrganizationList.result:type_name -> Organization
	4,  // 13: Kato.ListModels:input_type -> Identifier
	4,  // 14: Kato.GetModel:input_type -> Identifier
	5,  // 15: Kato.PutModel:input_type -> Model
	5,  // 16: Kato.DeleteModel:input_type -> Model
	4,  // 17: Kato.ListProjects:input_type -> Identifier
	4,  // 18: Kato.GetProject:input_type -> Identifier
	7,  // 19: Kato.PutProject:input_type -> Project
	7,  // 20: Kato.DeleteProject:input_type -> Project
	4,  // 21: Kato.ListUser:input_type -> Identifier
	4,  // 22: Kato.GetUser:input_type -> Identifier
	9,  // 23: Kato.PutUser:input_type -> User
	9,  // 24: Kato.DeleteUser:input_type -> User
	4,  // 25: Kato.ListTeam:input_type -> Identifier
	4,  // 26: Kato.GetTeam:input_type -> Identifier
	11, // 27: Kato.PutTeam:input_type -> Team
	11, // 28: Kato.DeleteTeam:input_type -> Team
	4,  // 29: Kato.ListOrganizations:input_type -> Identifier
	4,  // 30: Kato.GetOrganization:input_type -> Identifier
	13, // 31: Kato.PutOrganization:input_type -> Organization
	13, // 32: Kato.DeleteOrganization:input_type -> Organization
	6,  // 33: Kato.ListModels:output_type -> ModelList
	5,  // 34: Kato.GetModel:output_type -> Model
	5,  // 35: Kato.PutModel:output_type -> Model
	5,  // 36: Kato.DeleteModel:output_type -> Model
	8,  // 37: Kato.ListProjects:output_type -> ProjectList
	7,  // 38: Kato.GetProject:output_type -> Project
	7,  // 39: Kato.PutProject:output_type -> Project
	7,  // 40: Kato.DeleteProject:output_type -> Project
	10, // 41: Kato.ListUser:output_type -> UserList
	9,  // 42: Kato.GetUser:output_type -> User
	9,  // 43: Kato.PutUser:output_type -> User
	9,  // 44: Kato.DeleteUser:output_type -> User
	12, // 45: Kato.ListTeam:output_type -> TeamList
	11, // 46: Kato.GetTeam:output_type -> Team
	11, // 47: Kato.PutTeam:output_type -> Team
	11, // 48: Kato.DeleteTeam:output_type -> Team
	14, // 49: Kato.ListOrganizations:output_type -> OrganizationList
	13, // 50: Kato.GetOrganization:output_type -> Organization
	13, // 51: Kato.PutOrganization:output_type -> Organization
	13, // 52: Kato.DeleteOrganization:output_type -> Organization
	33, // [33:53] is the sub-list for method output_type
	13, // [13:33] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_kato_proto_init() }
func file_api_kato_proto_init() {
	if File_api_kato_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_kato_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_kato_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_kato_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_kato_proto_goTypes,
		DependencyIndexes: file_api_kato_proto_depIdxs,
		EnumInfos:         file_api_kato_proto_enumTypes,
		MessageInfos:      file_api_kato_proto_msgTypes,
	}.Build()
	File_api_kato_proto = out.File
	file_api_kato_proto_rawDesc = nil
	file_api_kato_proto_goTypes = nil
	file_api_kato_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KatoClient is the client API for Kato service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KatoClient interface {
	ListModels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListModelsClient, error)
	GetModel(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Model, error)
	PutModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error)
	DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error)
	ListProjects(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListProjectsClient, error)
	GetProject(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Project, error)
	PutProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	ListUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListUserClient, error)
	GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error)
	PutUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ListTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListTeamClient, error)
	GetTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error)
	PutTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	DeleteTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	ListOrganizations(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListOrganizationsClient, error)
	GetOrganization(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Organization, error)
	PutOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
}

type katoClient struct {
	cc grpc.ClientConnInterface
}

func NewKatoClient(cc grpc.ClientConnInterface) KatoClient {
	return &katoClient{cc}
}

func (c *katoClient) ListModels(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[0], "/Kato/ListModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListModelsClient interface {
	Recv() (*ModelList, error)
	grpc.ClientStream
}

type katoListModelsClient struct {
	grpc.ClientStream
}

func (x *katoListModelsClient) Recv() (*ModelList, error) {
	m := new(ModelList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetModel(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/Kato/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/Kato/PutModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/Kato/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListProjects(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[1], "/Kato/ListProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListProjectsClient interface {
	Recv() (*ProjectList, error)
	grpc.ClientStream
}

type katoListProjectsClient struct {
	grpc.ClientStream
}

func (x *katoListProjectsClient) Recv() (*ProjectList, error) {
	m := new(ProjectList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetProject(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/Kato/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/Kato/PutProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/Kato/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[2], "/Kato/ListUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListUserClient interface {
	Recv() (*UserList, error)
	grpc.ClientStream
}

type katoListUserClient struct {
	grpc.ClientStream
}

func (x *katoListUserClient) Recv() (*UserList, error) {
	m := new(UserList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetUser(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Kato/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Kato/PutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Kato/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListTeamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[3], "/Kato/ListTeam", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListTeamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListTeamClient interface {
	Recv() (*TeamList, error)
	grpc.ClientStream
}

type katoListTeamClient struct {
	grpc.ClientStream
}

func (x *katoListTeamClient) Recv() (*TeamList, error) {
	m := new(TeamList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetTeam(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/Kato/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/Kato/PutTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/Kato/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) ListOrganizations(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (Kato_ListOrganizationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kato_serviceDesc.Streams[4], "/Kato/ListOrganizations", opts...)
	if err != nil {
		return nil, err
	}
	x := &katoListOrganizationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kato_ListOrganizationsClient interface {
	Recv() (*OrganizationList, error)
	grpc.ClientStream
}

type katoListOrganizationsClient struct {
	grpc.ClientStream
}

func (x *katoListOrganizationsClient) Recv() (*OrganizationList, error) {
	m := new(OrganizationList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *katoClient) GetOrganization(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/Kato/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) PutOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/Kato/PutOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katoClient) DeleteOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/Kato/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KatoServer is the server API for Kato service.
type KatoServer interface {
	ListModels(*Identifier, Kato_ListModelsServer) error
	GetModel(context.Context, *Identifier) (*Model, error)
	PutModel(context.Context, *Model) (*Model, error)
	DeleteModel(context.Context, *Model) (*Model, error)
	ListProjects(*Identifier, Kato_ListProjectsServer) error
	GetProject(context.Context, *Identifier) (*Project, error)
	PutProject(context.Context, *Project) (*Project, error)
	DeleteProject(context.Context, *Project) (*Project, error)
	ListUser(*Identifier, Kato_ListUserServer) error
	GetUser(context.Context, *Identifier) (*User, error)
	PutUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	ListTeam(*Identifier, Kato_ListTeamServer) error
	GetTeam(context.Context, *Identifier) (*Team, error)
	PutTeam(context.Context, *Team) (*Team, error)
	DeleteTeam(context.Context, *Team) (*Team, error)
	ListOrganizations(*Identifier, Kato_ListOrganizationsServer) error
	GetOrganization(context.Context, *Identifier) (*Organization, error)
	PutOrganization(context.Context, *Organization) (*Organization, error)
	DeleteOrganization(context.Context, *Organization) (*Organization, error)
}

// UnimplementedKatoServer can be embedded to have forward compatible implementations.
type UnimplementedKatoServer struct {
}

func (*UnimplementedKatoServer) ListModels(*Identifier, Kato_ListModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (*UnimplementedKatoServer) GetModel(context.Context, *Identifier) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (*UnimplementedKatoServer) PutModel(context.Context, *Model) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutModel not implemented")
}
func (*UnimplementedKatoServer) DeleteModel(context.Context, *Model) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (*UnimplementedKatoServer) ListProjects(*Identifier, Kato_ListProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedKatoServer) GetProject(context.Context, *Identifier) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedKatoServer) PutProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProject not implemented")
}
func (*UnimplementedKatoServer) DeleteProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedKatoServer) ListUser(*Identifier, Kato_ListUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (*UnimplementedKatoServer) GetUser(context.Context, *Identifier) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedKatoServer) PutUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUser not implemented")
}
func (*UnimplementedKatoServer) DeleteUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedKatoServer) ListTeam(*Identifier, Kato_ListTeamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTeam not implemented")
}
func (*UnimplementedKatoServer) GetTeam(context.Context, *Identifier) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedKatoServer) PutTeam(context.Context, *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTeam not implemented")
}
func (*UnimplementedKatoServer) DeleteTeam(context.Context, *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedKatoServer) ListOrganizations(*Identifier, Kato_ListOrganizationsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (*UnimplementedKatoServer) GetOrganization(context.Context, *Identifier) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedKatoServer) PutOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutOrganization not implemented")
}
func (*UnimplementedKatoServer) DeleteOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}

func RegisterKatoServer(s *grpc.Server, srv KatoServer) {
	s.RegisterService(&_Kato_serviceDesc, srv)
}

func _Kato_ListModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListModels(m, &katoListModelsServer{stream})
}

type Kato_ListModelsServer interface {
	Send(*ModelList) error
	grpc.ServerStream
}

type katoListModelsServer struct {
	grpc.ServerStream
}

func (x *katoListModelsServer) Send(m *ModelList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetModel(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/PutModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListProjects(m, &katoListProjectsServer{stream})
}

type Kato_ListProjectsServer interface {
	Send(*ProjectList) error
	grpc.ServerStream
}

type katoListProjectsServer struct {
	grpc.ServerStream
}

func (x *katoListProjectsServer) Send(m *ProjectList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetProject(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/PutProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListUser(m, &katoListUserServer{stream})
}

type Kato_ListUserServer interface {
	Send(*UserList) error
	grpc.ServerStream
}

type katoListUserServer struct {
	grpc.ServerStream
}

func (x *katoListUserServer) Send(m *UserList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetUser(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListTeam_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListTeam(m, &katoListTeamServer{stream})
}

type Kato_ListTeamServer interface {
	Send(*TeamList) error
	grpc.ServerStream
}

type katoListTeamServer struct {
	grpc.ServerStream
}

func (x *katoListTeamServer) Send(m *TeamList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetTeam(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/PutTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_ListOrganizations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KatoServer).ListOrganizations(m, &katoListOrganizationsServer{stream})
}

type Kato_ListOrganizationsServer interface {
	Send(*OrganizationList) error
	grpc.ServerStream
}

type katoListOrganizationsServer struct {
	grpc.ServerStream
}

func (x *katoListOrganizationsServer) Send(m *OrganizationList) error {
	return x.ServerStream.SendMsg(m)
}

func _Kato_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).GetOrganization(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_PutOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).PutOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/PutOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).PutOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kato_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatoServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kato/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatoServer).DeleteOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kato_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Kato",
	HandlerType: (*KatoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModel",
			Handler:    _Kato_GetModel_Handler,
		},
		{
			MethodName: "PutModel",
			Handler:    _Kato_PutModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _Kato_DeleteModel_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Kato_GetProject_Handler,
		},
		{
			MethodName: "PutProject",
			Handler:    _Kato_PutProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Kato_DeleteProject_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Kato_GetUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _Kato_PutUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Kato_DeleteUser_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Kato_GetTeam_Handler,
		},
		{
			MethodName: "PutTeam",
			Handler:    _Kato_PutTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Kato_DeleteTeam_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _Kato_GetOrganization_Handler,
		},
		{
			MethodName: "PutOrganization",
			Handler:    _Kato_PutOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _Kato_DeleteOrganization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListModels",
			Handler:       _Kato_ListModels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListProjects",
			Handler:       _Kato_ListProjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUser",
			Handler:       _Kato_ListUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTeam",
			Handler:       _Kato_ListTeam_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOrganizations",
			Handler:       _Kato_ListOrganizations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/kato.proto",
}
